//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
NotFoundException = module.exports.NotFoundException = function(args) {
  Thrift.TException.call(this, "NotFoundException")
  this.name = "NotFoundException"
};
Thrift.inherits(NotFoundException, Thrift.TException);
NotFoundException.prototype.name = 'NotFoundException';
NotFoundException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotFoundException.prototype.write = function(output) {
  output.writeStructBegin('NotFoundException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidRequestException = module.exports.InvalidRequestException = function(args) {
  Thrift.TException.call(this, "InvalidRequestException")
  this.name = "InvalidRequestException"
  this.why = null;
  if (args) {
    if (args.why !== undefined && args.why !== null) {
      this.why = args.why;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field why is unset!');
    }
  }
};
Thrift.inherits(InvalidRequestException, Thrift.TException);
InvalidRequestException.prototype.name = 'InvalidRequestException';
InvalidRequestException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.why = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidRequestException.prototype.write = function(output) {
  output.writeStructBegin('InvalidRequestException');
  if (this.why !== null && this.why !== undefined) {
    output.writeFieldBegin('why', Thrift.Type.STRING, 1);
    output.writeString(this.why);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UnavailableException = module.exports.UnavailableException = function(args) {
  Thrift.TException.call(this, "UnavailableException")
  this.name = "UnavailableException"
};
Thrift.inherits(UnavailableException, Thrift.TException);
UnavailableException.prototype.name = 'UnavailableException';
UnavailableException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UnavailableException.prototype.write = function(output) {
  output.writeStructBegin('UnavailableException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimedOutException = module.exports.TimedOutException = function(args) {
  Thrift.TException.call(this, "TimedOutException")
  this.name = "TimedOutException"
};
Thrift.inherits(TimedOutException, Thrift.TException);
TimedOutException.prototype.name = 'TimedOutException';
TimedOutException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimedOutException.prototype.write = function(output) {
  output.writeStructBegin('TimedOutException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Header = module.exports.Header = function(args) {
  this.protocol = null;
  this.tid = null;
  this.msgType = null;
  this.invokeMode = null;
  this.connectionId = null;
  this.msgName = null;
  this.rpcId = null;
  this.relayState = null;
  this.url = null;
  this.comeFrom = null;
  this.to = null;
  this.resultCode = null;
  this.apId = null;
  if (args) {
    if (args.protocol !== undefined && args.protocol !== null) {
      this.protocol = args.protocol;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field protocol is unset!');
    }
    if (args.tid !== undefined && args.tid !== null) {
      this.tid = args.tid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tid is unset!');
    }
    if (args.msgType !== undefined && args.msgType !== null) {
      this.msgType = args.msgType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field msgType is unset!');
    }
    if (args.invokeMode !== undefined && args.invokeMode !== null) {
      this.invokeMode = args.invokeMode;
    }
    if (args.connectionId !== undefined && args.connectionId !== null) {
      this.connectionId = args.connectionId;
    }
    if (args.msgName !== undefined && args.msgName !== null) {
      this.msgName = args.msgName;
    }
    if (args.rpcId !== undefined && args.rpcId !== null) {
      this.rpcId = args.rpcId;
    }
    if (args.relayState !== undefined && args.relayState !== null) {
      this.relayState = args.relayState;
    }
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    }
    if (args.comeFrom !== undefined && args.comeFrom !== null) {
      this.comeFrom = args.comeFrom;
    }
    if (args.to !== undefined && args.to !== null) {
      this.to = args.to;
    }
    if (args.resultCode !== undefined && args.resultCode !== null) {
      this.resultCode = args.resultCode;
    }
    if (args.apId !== undefined && args.apId !== null) {
      this.apId = args.apId;
    }
  }
};
Header.prototype = {};
Header.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.protocol = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.msgType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.invokeMode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.connectionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.msgName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.rpcId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.relayState = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.comeFrom = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.to = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.resultCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.apId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Header.prototype.write = function(output) {
  output.writeStructBegin('Header');
  if (this.protocol !== null && this.protocol !== undefined) {
    output.writeFieldBegin('protocol', Thrift.Type.STRING, 1);
    output.writeString(this.protocol);
    output.writeFieldEnd();
  }
  if (this.tid !== null && this.tid !== undefined) {
    output.writeFieldBegin('tid', Thrift.Type.STRING, 2);
    output.writeString(this.tid);
    output.writeFieldEnd();
  }
  if (this.msgType !== null && this.msgType !== undefined) {
    output.writeFieldBegin('msgType', Thrift.Type.I32, 3);
    output.writeI32(this.msgType);
    output.writeFieldEnd();
  }
  if (this.invokeMode !== null && this.invokeMode !== undefined) {
    output.writeFieldBegin('invokeMode', Thrift.Type.I32, 4);
    output.writeI32(this.invokeMode);
    output.writeFieldEnd();
  }
  if (this.connectionId !== null && this.connectionId !== undefined) {
    output.writeFieldBegin('connectionId', Thrift.Type.STRING, 5);
    output.writeString(this.connectionId);
    output.writeFieldEnd();
  }
  if (this.msgName !== null && this.msgName !== undefined) {
    output.writeFieldBegin('msgName', Thrift.Type.STRING, 6);
    output.writeString(this.msgName);
    output.writeFieldEnd();
  }
  if (this.rpcId !== null && this.rpcId !== undefined) {
    output.writeFieldBegin('rpcId', Thrift.Type.STRING, 7);
    output.writeString(this.rpcId);
    output.writeFieldEnd();
  }
  if (this.relayState !== null && this.relayState !== undefined) {
    output.writeFieldBegin('relayState', Thrift.Type.STRING, 8);
    output.writeString(this.relayState);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 9);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.comeFrom !== null && this.comeFrom !== undefined) {
    output.writeFieldBegin('comeFrom', Thrift.Type.STRING, 10);
    output.writeString(this.comeFrom);
    output.writeFieldEnd();
  }
  if (this.to !== null && this.to !== undefined) {
    output.writeFieldBegin('to', Thrift.Type.STRING, 11);
    output.writeString(this.to);
    output.writeFieldEnd();
  }
  if (this.resultCode !== null && this.resultCode !== undefined) {
    output.writeFieldBegin('resultCode', Thrift.Type.I32, 12);
    output.writeI32(this.resultCode);
    output.writeFieldEnd();
  }
  if (this.apId !== null && this.apId !== undefined) {
    output.writeFieldBegin('apId', Thrift.Type.STRING, 13);
    output.writeString(this.apId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Msg = module.exports.Msg = function(args) {
  this.header = null;
  this.body = null;
  if (args) {
    if (args.header !== undefined && args.header !== null) {
      this.header = new ttypes.Header(args.header);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field header is unset!');
    }
    if (args.body !== undefined && args.body !== null) {
      this.body = args.body;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field body is unset!');
    }
  }
};
Msg.prototype = {};
Msg.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.header = new ttypes.Header();
        this.header.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.body = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Msg.prototype.write = function(output) {
  output.writeStructBegin('Msg');
  if (this.header !== null && this.header !== undefined) {
    output.writeFieldBegin('header', Thrift.Type.STRUCT, 1);
    this.header.write(output);
    output.writeFieldEnd();
  }
  if (this.body !== null && this.body !== undefined) {
    output.writeFieldBegin('body', Thrift.Type.STRING, 2);
    output.writeString(this.body);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.VERSION = '19.24.0';
