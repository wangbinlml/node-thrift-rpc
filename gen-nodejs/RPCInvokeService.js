//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./rpc_types');
//HELPER FUNCTIONS AND STRUCTURES

RPCInvokeService_invoke_args = function(args) {
  this.serviceName = null;
  this.methodName = null;
  this.msg = null;
  if (args) {
    if (args.serviceName !== undefined && args.serviceName !== null) {
      this.serviceName = args.serviceName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field serviceName is unset!');
    }
    if (args.methodName !== undefined && args.methodName !== null) {
      this.methodName = args.methodName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field methodName is unset!');
    }
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = new ttypes.Msg(args.msg);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field msg is unset!');
    }
  }
};
RPCInvokeService_invoke_args.prototype = {};
RPCInvokeService_invoke_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.serviceName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.methodName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.msg = new ttypes.Msg();
        this.msg.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RPCInvokeService_invoke_args.prototype.write = function(output) {
  output.writeStructBegin('RPCInvokeService_invoke_args');
  if (this.serviceName !== null && this.serviceName !== undefined) {
    output.writeFieldBegin('serviceName', Thrift.Type.STRING, 1);
    output.writeString(this.serviceName);
    output.writeFieldEnd();
  }
  if (this.methodName !== null && this.methodName !== undefined) {
    output.writeFieldBegin('methodName', Thrift.Type.STRING, 2);
    output.writeString(this.methodName);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRUCT, 3);
    this.msg.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RPCInvokeService_invoke_result = function(args) {
  this.success = null;
  this.invalidReq = null;
  this.timeOut = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.invalidReq = args;
    return;
  }
  if (args instanceof ttypes.TimedOutException) {
    this.timeOut = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Msg(args.success);
    }
    if (args.invalidReq !== undefined && args.invalidReq !== null) {
      this.invalidReq = args.invalidReq;
    }
    if (args.timeOut !== undefined && args.timeOut !== null) {
      this.timeOut = args.timeOut;
    }
  }
};
RPCInvokeService_invoke_result.prototype = {};
RPCInvokeService_invoke_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Msg();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.invalidReq = new ttypes.InvalidRequestException();
        this.invalidReq.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.timeOut = new ttypes.TimedOutException();
        this.timeOut.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RPCInvokeService_invoke_result.prototype.write = function(output) {
  output.writeStructBegin('RPCInvokeService_invoke_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.invalidReq !== null && this.invalidReq !== undefined) {
    output.writeFieldBegin('invalidReq', Thrift.Type.STRUCT, 1);
    this.invalidReq.write(output);
    output.writeFieldEnd();
  }
  if (this.timeOut !== null && this.timeOut !== undefined) {
    output.writeFieldBegin('timeOut', Thrift.Type.STRUCT, 2);
    this.timeOut.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RPCInvokeServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
RPCInvokeServiceClient.prototype = {};
RPCInvokeServiceClient.prototype.seqid = function() { return this._seqid; }
RPCInvokeServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
RPCInvokeServiceClient.prototype.invoke = function(serviceName, methodName, msg, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_invoke(serviceName, methodName, msg);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_invoke(serviceName, methodName, msg);
  }
};

RPCInvokeServiceClient.prototype.send_invoke = function(serviceName, methodName, msg) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('invoke', Thrift.MessageType.CALL, this.seqid());
  var args = new RPCInvokeService_invoke_args();
  args.serviceName = serviceName;
  args.methodName = methodName;
  args.msg = msg;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RPCInvokeServiceClient.prototype.recv_invoke = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RPCInvokeService_invoke_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.invalidReq) {
    return callback(result.invalidReq);
  }
  if (null !== result.timeOut) {
    return callback(result.timeOut);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('invoke failed: unknown result');
};
RPCInvokeServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
RPCInvokeServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

RPCInvokeServiceProcessor.prototype.process_invoke = function(seqid, input, output) {
  var args = new RPCInvokeService_invoke_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.invoke.length === 3) {
    Q.fcall(this._handler.invoke, args.serviceName, args.methodName, args.msg)
      .then(function(result) {
        var result = new RPCInvokeService_invoke_result({success: result});
        output.writeMessageBegin("invoke", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidRequestException || err instanceof ttypes.TimedOutException) {
          var result = new RPCInvokeService_invoke_result(err);
          output.writeMessageBegin("invoke", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("invoke", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.invoke(args.serviceName, args.methodName, args.msg, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidRequestException || err instanceof ttypes.TimedOutException) {
        var result = new RPCInvokeService_invoke_result((err != null ? err : {success: result}));
        output.writeMessageBegin("invoke", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("invoke", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

